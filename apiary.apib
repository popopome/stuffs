HOST: http://api.cameraace.net/

--- CameraAce API ---

---
CameraAce API for supporting slideshow and group share.
---

--
Folder

The following is a section of resources related to the shared folder

--

<h1>Create folder</h1>

- Receives session key, title, description, filters, frames, camera_color  
       - owner_id is set by referring to the session_key sent
- Returns status code 0 upon a successful completion of the received request

POST /v0/folders
> "sid": "ABCDEFG"
> Content-Type: application/json
{ "t": "title",        
  "d": "desc",
  "f": "filters",
  "r": "frames",       
  "c": "camera_color", 
  "oid": "owner_id"}
< 200
< Content-Type: application/json
{ "code": 0,
  "folder_id": "folder_id"
}


<h1>Update folder</h1>

- Update folder settings  
- Takes a parameter that can either be r or m
- r, which is short for replace.
    - replaces the matching key’s value  
- m, short for merge.

    - Either add or remove the given value form the the matching key’s value  
    - Used to update values that have multiple values, e.g. lists such as photo_list, slideshow_list, filters, and frames  
    
- Returns the request status code and updated values.
    - If only photo_list was to update then the returned json output will have the newly updated value of the photo_list only.  
    
>e.g. If the current filters of a folder contains  
>> filters: ["filter1", "filter2", "filter3"]  
    
>and a folder_update request with the following parameter is made.  
>>m: [["filters", "remove", "filter2"] ["filters", "add", "filter4"]]  
    
>then the result of the update will be
>>filters: ["filter1", "filter3", "filter4"]  
        
>Notice that "filter2" is removed and "filter4" is added to filters.
      
PUT /v0/folders/{folderId}
> "sid": "ABCDEFG"
> Content-Type: application/json
{ "r": [["title", "new title"], ["desc", "description"]],
  "m": [["filters", "add", "filter1"], ["filters", "remove", "filter2"]]
}
< 200
< Content-Type: application/json
{ "code": 0,
   "folder_id": "folder_id",
   "title": "title",
   "desc": "desc",
   "filters": ["filter_name1", "filter_name2"],
   "frames": ["frame_name1", "frame_name2"],
   "camera_color": "camera_color"
} 


<h1>Update share user</h1>

- Update user status on this folder
- Takes user data, optionally, including the email and the permission of the involved user on this folder
    - The user data as an input for this API is optional, meaning that if there are more than one share user and only one user data is provided, then only users that match the input user data is affected.  
    - In case of an addition of a user, all the existing share users won’t be affected.
- Update the user status by modifying share_list
- Returns the updated user statuses on the folder

- The below is a list of side effects that will occur depending on the updated status when a request is sent to this API.
>Case 1  
>1. A request to remove the owner is received.  
>2. Owner of the folder is to be removed.  
>3. If the additional status provided is "leave",  
>>a. Sharing ends.  
>>b. The photos are left undeleted on each shared users folders  

    >4. If the additional status is "unshared"  
    >>a. Sharing ends.  
    >>b. All the photos except of which the folder owner owns get deleted from the folder  
    >>c. The folder is removed from other share user of the folder during the next syncing phase.  
    
    >Case 2  
    >1. There is a share user list on this folder  
    >2. A request to remove a share user from the folder is received  
    >3. The share user is to be removed from the share list  
    >4. If the additional status provided is "leave",  
    >>a. The ownership of the photos the user owns is transferred to the owner of the folder  
    >>b. If the additional status is "unshared"  
    >>c. The photos the user owns get deleted from the other users of the folder during the next syncing phase  
    >>d. Notifications are sent to other share users of the folder  
        
    >Case 3  
    >1. A request to add new user to the share list of this folder is received.  
    >2. The new user is added to the share list of this folder.  
    >3. Notifications are sent to other share users of the folder  
    >4. An invitation email is sent.  
    

PUT /v0/folders/{folderId}/users
> "sid": "ABCDEFG"
> Content-Type: application/json
{ "a": [["email1@ca.com", "remove", "leave"],
        ["email2@ca.com", "add"],
        ["email3@ca.com", "update", "accept"], 
        ["email4@ca.com", "remove", "unshared"]]
}
< 200
< Content-Type: application/json
{ "code": 0,
   "folder_id": "folder_id",
   "users": [["email1@ca.com", "removed"],
             ["email2@ca.com", "pending"],
             ["email3@ca.com", "accept"], 
             ["email4@ca.com", "removed"]]
} 


<h1>Get Folder</h1>

- Get the data of the folder which is associated with the given folder_id.
- Optionally, takes a keylist, to retrieve specific key values.
- Otherwise, shows all keys for given folder id.
> e.g.
> If a query string, k, was provided,
>> /v0/folders/{folderId}?sid=ABCDE&k=photo_list,owner_id  

    > then the output json will contain only the values of the matching keys
>>    { "code": 0,  "photo_list": ["photo_id1", "photo_id2"], "owner_id": "user id" }

GET /v0/folders/{folderId}?sid=ABCDE
< 200
< Content-Type: application/json
{ "code": 0,
   "folder_id": "folder_id",
   "creation_date": "09/18/2013",
   "owner_id": "user id",
   "share_list": [{"user_id": "user id", "status": "pending"}],
   "photo_list": ["photo_id1", "photo_id2"],
   "check_sum": "check_sum",
   "title": "title",
   "description": "description",
   "filters": ["filter_name1", "filter_name2"],
   "frames": ["frame_name1", "frame_name2"],
   "music": "TBD",
   "slideshow_list": ["photo_id1", "photo_id2"],
}


<h1>Get log</h1>

- Get a list of logs that actions made by users on this folder
    - The data contents can be used to generate notifications.
- Take two parameters, t and n.
    - If t, stands for timestamp, is specified in the query string,  
    then log data after the timestamp are sent back in the response.
    - If n, the number of logs to receive, is specified,  
    then less than or equal number of log data is sent back in the response.
- Used to construct notification messages of a folder.
- Defaults to 5 if n is not specified. TBD

GET /v0/folders/{folderId}/logs?sid=ABCDEFG&t=1348172839&n=3
< 200
< Content-Type: application/json
{ "code": 0,
   "msg": [["name", "action", "folder name", "time string"],
           ["User A", "add", "class of 2013", "13457893475"],
           ["User B", "add", "class of 2013", "13457893467"]]
}

--
Photo
--

<h1>Create photo</h1>

Create a photo, upload photo & thumbnail binary data.

Input =>

- mtype : mime-type
- psize : photo-byte-array-size
- tsize : thumbnail-byte-array-size
- pw : photo width
- ph : photo height
- tw : thumb width
- th : thumb height

Side Effects => 

- Create and associate a new PHOTO_RAW entry
- Add Photo to Folder’s photo_list
- Add this action to the Folder Log

POST /v0/folders/{folderId}/photos
> "sid": "ABCDEFG"
> Content-Type: application/json 
{ "mtype": "image/jpeg", 
   "psize" : 123456, 
   "tsize" : 12345, 
   "pw" : 1280, 
   "ph" : 960,  
   "tw" : 400,  
   "th" : 400  }
< 200
< Content-Type: application/json
{ "code":0, "description": "OK", "photoId": "ABCDEFG" }


<h1>Delete photo</h1>

Delete photo from folder.

Side Effects => 

- Remove the associated PHOTO_RAW entry
- Remove Photo from Folder’s photo_list
- Add this action to the Folder Log

DELETE /v0/folders/{folderId}/photos/{photoId}
> "sid": "ABCDEFG"
< 200
< Content-Type: application/json
{ "code":0, "description": "OK" }


<h1>Get photo url</h1>

Get public url to download photos/thumbnails.

GET /v0/folders/{folderId}/photos/{photoId}{?sid=ABCDEFG}
< 200
< Content-Type: application/json
{ "code":0, 
    "photoUrl": "http://some-url-to-download-photo", 
    "thumbUrl" : "http://some-url-to-download-thumbnail" } 
    
--
User
--

<h1>Get user's folder list</h1>

Get list of folders :

- folders that are owned by user
- folders that are shared to user

GET /v0/users/folders{?sid=ABCDEFG}
< 200
< Content-Type: application/json
{ "code":0, 
    "user_folders": ["id1", "id2", "id3"], 
    "shared_folders": ["id1", "id2", "id3"] }

<h1>Get user events</h1>

Get list of user events.

Events are sorted by timestamp in descending order (most recent event is in front of list).

<u>Event Type</u>

0 = Folder Invitation 

- sent to users who have been invited to join a folder. 
- event data => { fid : <folderId>, owner : <owner name> }
- client action => send user_event_resolved : "accept" or "reject"

1 = Folder Destroy

- sent to all shared members when owner leaves a folder
- event data => { pid : [id1, id2, id3 ...  ], name : <folder name> }
- client action => 
  a) If there are photos in pid, create a new local folder containing all photos in pid
  b) send user_event_resolved : "OK"

GET /v0/users/events{?sid=ABCDEFG}
< 200
< Content-Type: application/json
{ "code":0, 
  "events": [
     { "id": "ABCDEFG", "type": 0, 
       "data": {"fid": "--folder id--", "owner": "--owner id--"}, 
       "timestamp": 1379469940381 },
     { "id": "HIJKLMN", "type": 1, 
       "data": {"pid": ["photoid1", "photoid2"], "name": "folder name"},
       "timestamp": 1379469908710 }
  ]}

<h1>Resolve user event</h1>

Resolve an user event.

POST /v0/users/events/{eventId}
> "sid": "ABCDEFG"
> Content-Type: application/json
{ "d": "accept" }
< 200
< Content-Type: application/json
{ "code":0, "description": "OK" } 

--
Slideshow
--

<h1>Get slideshow url</h1>

Get a new public link for playing a slideshow.

GET /v0/folders/{folderId}/slideshows{?sid=ABCDEF}
< 200
< Content-Type: application/json
{ "code":0, "url": "http://some-url-to-play-slideshow" } 